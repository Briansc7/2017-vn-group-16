options {
	STATIC = false ;
}

PARSER_BEGIN(Parser)
//
package parser;

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import componentesMatematicos.CuentaCalculo;
import componentesMatematicos.Expresion;
import componentesMatematicos.Division;
import componentesMatematicos.FactorNumerico;
import componentesMatematicos.IndicadorCalculo;
import componentesMatematicos.Producto;
import componentesMatematicos.Resta;
import componentesMatematicos.Suma;

import model.Empresa;
import model.BaseDeDatos;

public class Parser {
	
	static public Expresion parsear(String indicador) throws ParseException, TokenMgrError {
	  	Reader reader = new StringReader(indicador);
		Parser parser = new Parser(reader);
		return parser.Expression();
	}
}

PARSER_END(Parser)


SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN : { < OPERADOR : (["+","-","*","/"]){1} > }
TOKEN : { < OPENPAR : "(" > | < CLOSEPAR : ")" > }
TOKEN : { < NUMERO : (["0"-"9"])+ >}
TOKEN : { < PALABRA : ("i." | "c.")(["a"-"z","A"-"Z"])+ > }

//----------------------------------Version pablistica------------------------------
Expresion Expression() :
{
	Expresion operandoIzquierdo;
	Expresion operandoDerecho;
	Token operador;
}
{

	operandoIzquierdo = Primary()

	[
		operador=<OPERADOR>
		operandoDerecho = Expression()
		{
			if (operador.image.equalsIgnoreCase("+")) {
				return new Suma(operandoIzquierdo,operandoDerecho); 
			}
			if (operador.image.equalsIgnoreCase("-")) {
		  		return new Resta(operandoIzquierdo,operandoDerecho); 
			}
			if (operador.image.equalsIgnoreCase("*")) {
			  	return new Producto(operandoIzquierdo,operandoDerecho);
			}
			if (operador.image.equalsIgnoreCase("/")) {
			  	return new Division(operandoIzquierdo,operandoDerecho);
			}  
		}  		
	]

	{
		return operandoIzquierdo;  
	}
	
	
}

Expresion Primary() :
{
	Expresion subExpresion;
	Token t;
}
{
	t=<NUMERO>
	{ 
		FactorNumerico miNumero = new FactorNumerico(Integer.parseInt(t.image));
		{ return miNumero; }
	}
	|
	t=<PALABRA>
	{ if(t.image.substring(0,2).equalsIgnoreCase("i.")) {
		 IndicadorCalculo miIndicador = new IndicadorCalculo(t.image.substring(2));
		 { return miIndicador; }
	  } else {
  		 CuentaCalculo miCuenta = new CuentaCalculo(t.image.substring(2));
		 { return miCuenta; }   
	  }
	}
	|
	<OPENPAR> subExpresion=Expression() <CLOSEPAR>
	{ return subExpresion; }
}
//--------------------------Version original-------------------------------
/*
List<String> Expression() :
{
	List<String> palabras = new ArrayList<String>();
}
{
	Primary(palabras)
	(
		<OPERADOR>
		Primary(palabras)
	)*
	//<EOF>
	{ return palabras; }
}

void Primary(List<String> lista) :
{
	List<String> sublista;
	Token t;
}
{
	<NUMERO> 
	|
	t=<PALABRA>
	{ if(t.image.substring(0,2).equalsIgnoreCase("i.")) {
		 lista.add(t.image.substring(2));
	  } else {
	     lista.add(t.image);
	  }
	}
	|
	<OPENPAR> sublista=Expression() <CLOSEPAR>
	{ lista.addAll(sublista); }
}
*/