options {
	STATIC = false ;
}

PARSER_BEGIN(Parser)
//
package parser;

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import componentesMatematicos.CuentaCalculo;
import componentesMatematicos.Expresion;
import componentesMatematicos.Division;
import componentesMatematicos.FactorNumerico;
import componentesMatematicos.IndicadorCalculo;
import componentesMatematicos.Producto;
import componentesMatematicos.Resta;
import componentesMatematicos.Suma;

import model.Empresa;
import model.Planilla;

public class Parser {
/*	static public List<String> parsear(String indicador) throws ParseException, TokenMgrError {
	  	Reader reader = new StringReader(indicador);
		Parser parser = new Parser(reader);
		return parser.Expression();
	} */
	
	static public Expresion parsear(String indicador) throws ParseException, TokenMgrError {
	  	Reader reader = new StringReader(indicador);
		Parser parser = new Parser(reader);
		return parser.Expression();
	}
}

PARSER_END(Parser)

/*
SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN : { < OPERADOR : (["+","-","*","/"]){1} > }
TOKEN : { < OPENPAR : "(" > | < CLOSEPAR : ")" > }
TOKEN : { < NUMERO : (["0"-"9"])+ >}
TOKEN : { < PALABRA : ("i." | "c.")(["a"-"z","A"-"Z"])+ > }
*/

SKIP : { " " | "\t" | "\n" | "\r" } 
TOKEN : { < FACTORNUMERICO : (["0"-"9"])+ > }
TOKEN : { < FACTORLITERAL : ("i." | "c." ) (["a"-"z","A"-"Z"])+ > }
TOKEN : { < SUMA : "+" > | < RESTA : "-" > | < PRODUCTO : "*" > | < DIVISION : "/" > }
TOKEN : { < ABRIRPAR : "(" > | < CERRARPAR : ")" > }

Expresion Expression() :
{
	Expresion expresionIzquierda;
	Expresion expresionDerecha;
}
{
	expresionIzquierda = Primary()
	{return expresionIzquierda; }
	|
	expresionIzquierda = Primary()
	< SUMA >
	expresionDerecha = Expression()	{ return new Suma(expresionIzquierda, expresionDerecha); }
	|
	expresionIzquierda = Primary()
	< RESTA >
	expresionDerecha = Expression()
	{ return new Resta(expresionIzquierda, expresionDerecha); }
	|
	expresionIzquierda = Primary()
	< PRODUCTO >
	expresionDerecha = Expression()
	{ return new Producto(expresionIzquierda, expresionDerecha); }
	|
	expresionIzquierda = Primary()
	< DIVISION >
	expresionDerecha = Expression()
	{ return new Division(expresionIzquierda, expresionDerecha); }
}

Expresion Primary() :
{
	Expresion subExpresion;
	Token t;
}
{
	t=<FACTORNUMERICO>
	{ return new FactorNumerico(Integer.parseInt(t.image)); }
	|
	t=<FACTORLITERAL>
	{ if(t.image.substring(0,2).equalsIgnoreCase("i.")) {
		 { return new IndicadorCalculo(t.image.substring(2)); }
	  } else {
		 { return new CuentaCalculo(t.image.substring(2)); }   
	  }
	}
	|
	<ABRIRPAR> subExpresion=Expression() <CERRARPAR>
	{ return subExpresion; }
}

//***********************************************************************
/*
Expresion Expression() :
{
	Expresion operandoIzquierdo;
	Expresion operandoDerecho;
	boolean hayOperandoDerecho = false;
	Token operador;
}
{

	operandoIzquierdo = Primary()

	( 
		operador=<OPERADOR>
		operandoDerecho = Expression()
		{
			hayOperandoDerecho = true;
		}  		
	)

	{
	  
		if(hayOperandoDerecho) {
			if (operador.image.equalsIgnoreCase("+")) {
				Suma miSuma = new Suma(operandoIzquierdo,operandoDerecho);
				{ return miSuma; }
			}
			if (operador.image.equalsIgnoreCase("-")) {
		  		Resta miResta = new Resta(operandoIzquierdo,operandoDerecho);
				{ return miResta; }
			}
			if (operador.image.equalsIgnoreCase("*")) {
			  	Producto miProducto = new Producto(operandoIzquierdo,operandoDerecho);
				{ return miProducto; }
			}
			if (operador.image.equalsIgnoreCase("/")) {
			  	Division miDivision = new Division(operandoIzquierdo,operandoDerecho);
				{ return miDivision; }
			}   
		} else {
			{ return operandoIzquierdo; }
		}    
	}
	
	
}

Expresion Primary() :
{
	Expresion subExpresion;
	Token t;
}
{
	t=<NUMERO>
	{ 
		FactorNumerico miNumero = new FactorNumerico(Integer.parseInt(t.image));
		{ return miNumero; }
	}
	|
	t=<PALABRA>
	{ if(t.image.substring(0,2).equalsIgnoreCase("i.")) {
		 IndicadorCalculo miIndicador = new IndicadorCalculo(t.image.substring(2));
		 { return miIndicador; }
	  } else {
  		 CuentaCalculo miCuenta = new CuentaCalculo(t.image.substring(2));
		 { return miCuenta; }   
	  }
	}
	|
	<OPENPAR> subExpresion=Expression() <CLOSEPAR>
	{ return subExpresion; }
}
*/
//**********************************************************************
/*
List<String> Expression() :
{
	List<String> palabras = new ArrayList<String>();
}
{
	Primary(palabras)
	(
		<OPERADOR>
		Primary(palabras)
	)*
	//<EOF>
	{ return palabras; }
}

void Primary(List<String> lista) :
{
	List<String> sublista;
	Token t;
}
{
	<NUMERO> 
	|
	t=<PALABRA>
	{ if(t.image.substring(0,2).equalsIgnoreCase("i.")) {
		 lista.add(t.image.substring(2));
	  } else {
	     lista.add(t.image);
	  }
	}
	|
	<OPENPAR> sublista=Expression() <CLOSEPAR>
	{ lista.addAll(sublista); }
}
*/